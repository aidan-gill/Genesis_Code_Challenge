using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraGrid;
using DevExpress.XtraEditors;
using DevExpress.XtraEditors.Repository;
using DevExpress.XtraGrid.Columns;
using CustomControlInGrid;

namespace Genisis_Code_Project
{
    public partial class frmOrder_Screen : Form
    {
        public frmOrder_Screen()
        {
            try
            {
                InitializeComponent();

                GridColumn unboundColumn = new GridColumn() { Caption = "Customers Name", UnboundType = DevExpress.Data.UnboundColumnType.Object };
                unboundColumn.FieldName = "CustomersName";
                unboundColumn.Visible = true;
                unboundColumn.VisibleIndex = 2;
                unboundColumn.Width = 250;
                grdOrdersView.Columns.Add(unboundColumn);

                CustomRepositoryItem repository = new CustomRepositoryItem();
                repository.ControlType = typeof(MyUserControl);
                unboundColumn.ColumnEdit = repository;
                // This line of code is generated by Data Source Configuration Wizard
                grdOrders.DataSource = new OrderModel.OrderEntities().Orders;         

                this.btnViewCustomer.Click += new System.EventHandler(this.repositoryItemButtonEdit1_Click);
                grdOrdersView.CustomUnboundColumnData += new DevExpress.XtraGrid.Views.Base.CustomColumnDataEventHandler(grdOrdersView_CustomUnboundColumnData);

            }
            catch (Exception ex)
            {

                string message = ex.Message + "\n   ::::::::::::: \n" + ex.StackTrace;
                MessageBox.Show(message, "Genesis - Init ", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            }	            
        }

        void grdOrdersView_CustomUnboundColumnData(object sender, DevExpress.XtraGrid.Views.Base.CustomColumnDataEventArgs e)
        {
            try
            {
                if (e.IsGetData)
                {
                    OrderModel.Order selectedorder = (e.Row as OrderModel.Order);
                    Tuple<string> t = new Tuple<string>(selectedorder.Customer.FirstName + " " + selectedorder.Customer.LastName);
                    e.Value = t;
                }
            }
            catch (Exception ex)
            {

                string message = ex.Message + "\n   ::::::::::::: \n" + ex.StackTrace;
                MessageBox.Show(message, "Genesis - Init ", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            }
        }

        private void grdOrdersView_CloseUp(object sender, DevExpress.XtraEditors.Controls.CloseUpEventArgs e)
        {
            try
            {
             if ((e.CloseMode != PopupCloseMode.Cancel) || (e.CloseMode == PopupCloseMode.Immediate))
                {
                    GridLookUpEdit gridLookUpEdit = sender as GridLookUpEdit;
                    DataRow lookupRow = gridLookUpEdit.Properties.View.GetFocusedDataRow();
                    DataRow editRow = grdOrdersView.GetFocusedDataRow();
                    if (grdOrdersView.IsNewItemRow(grdOrdersView.FocusedRowHandle) && editRow == null)
                    {
                        grdOrdersView.AddNewRow();
                        editRow = grdOrdersView.GetFocusedDataRow();
                        editRow[0] = lookupRow[0];
                    }
                    editRow[1] = lookupRow[1];
                    grdOrdersView.RefreshRow(grdOrdersView.FocusedRowHandle);
                }

            }
            catch (Exception ex)
            {

                string message = ex.Message + "\n   ::::::::::::: \n" + ex.StackTrace;
                MessageBox.Show(message, "Genesis - Init ", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            }	   
        }
        private void repositoryItemButtonEdit1_Click(object sender, EventArgs e)
            {
                try
                {
                    int iRowCount = grdOrdersView.GetFocusedDataSourceRowIndex();
                    OrderModel.Order selectedorder = (grdOrdersView.GetRow(iRowCount) as OrderModel.Order);

                    using (frmView_Customer_Screen frmCustomer = new frmView_Customer_Screen(selectedorder, ref this.grdOrders))
                    {
                        frmCustomer.ShowDialog();
                    }
                }
                catch (Exception ex)
                {

                    string message = ex.Message + "\n   ::::::::::::: \n" + ex.StackTrace;
                    MessageBox.Show(message, "Genesis - Init ", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                }	
            }
    }
}
